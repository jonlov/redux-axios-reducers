'use strict';

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.1.1
var Axios,
    AxiosRESTReducer,
    AxiosReducer,
    _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
},
    boundMethodCheck = function boundMethodCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new Error('Bound instance method accessed before binding');
  }
};

Axios = require('axios');

AxiosReducer = function () {
  var AxiosReducer = function () {
    // Construct types and defaults
    function AxiosReducer() {
      var _this = this,
          _reducers;

      var defaults1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, AxiosReducer);

      var base, base1, base2, base3, name;
      // Reducers
      this.reduceFetching = this.reduceFetching.bind(this);
      this.reduceSuccess = this.reduceSuccess.bind(this);
      this.reduceFail = this.reduceFail.bind(this);
      // Make a request with axios (global or configured instance)
      this.request = this.request.bind(this);
      // Process request
      this.fetch = this.fetch.bind(this);
      this.update = this.update.bind(this);
      this.get = this.get.bind(this);
      this.post = this.post.bind(this);
      this.put = this.put.bind(this);
      this.patch = this.patch.bind(this);
      this.remove = this.remove.bind(this);
      this.defaults = defaults1;
      this.initial = _extends({}, this.initial);
      if ((base = this.defaults).axios == null) {
        base.axios = Axios;
      }
      if ((base1 = this.defaults).name == null) {
        base1.name = 'noname';
      }
      if ((base2 = this.defaults).prefix == null) {
        base2.prefix = 'API';
      }
      if ((base3 = this.defaults).baseURL == null) {
        base3.baseURL = '/' + this.defaults.name;
      }
      this.actions = { fetch: this.fetch, update: this.update, get: this.get, post: this.post, put: this.put, patch: this.patch, remove: this.remove };
      name = this.defaults.name.toUpperCase();
      this.TYPES = {
        FETCHING: this.defaults.prefix + '/' + name + '/FETCHING',
        FETCH_FAIL: this.defaults.prefix + '/' + name + '/FETCH_FAIL',
        FETCH_SUCCESS: this.defaults.prefix + '/' + name + '/FETCH_SUCCESS',
        RESET: this.defaults.prefix + '/' + name + '/RESET',
        UPDATE: this.defaults.prefix + '/' + name + '/UPDATE'
      };
      this.reducers = (_reducers = {}, _defineProperty(_reducers, '' + this.TYPES.FETCHING, this.reduceFetching), _defineProperty(_reducers, '' + this.TYPES.FETCH_FAIL, this.reduceFail), _defineProperty(_reducers, '' + this.TYPES.FETCH_SUCCESS, this.reduceSuccess), _defineProperty(_reducers, '' + this.TYPES.RESET, function undefined() {
        return _this.initial;
      }), _defineProperty(_reducers, '' + this.TYPES.UPDATE, function undefined(state, action) {
        return _extends({}, state, action.payload);
      }), _reducers);
    }

    // Init reducer


    _createClass(AxiosReducer, [{
      key: 'configure',
      value: function configure(defaults) {
        var _this2 = this;

        var state_;
        state_ = null;
        this.getState = function () {
          return _extends({}, state_);
        };
        if (defaults) {
          this.defaults = _extends({}, this.defaults, defaults);
        }
        // Create Reducer
        return function () {
          var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this2.initial;
          var action = arguments[1];

          var reducer;
          reducer = _this2.reducers[action.type];
          return state_ = reducer ? reducer(state, action) : state;
        };
      }
    }, {
      key: 'modifyReducer',
      value: function modifyReducer(type, reducer) {
        type = type.toUpperCase();
        this.TYPES[type] = this.defaults.prefix + '/' + this.defaults.name.toUpperCase() + '/' + type;
        return this.reducers[this.TYPES[type]] = reducer;
      }
    }, {
      key: 'reduceFetching',
      value: function reduceFetching(state) {
        return _extends({}, state, {
          fetching: true
        });
      }
    }, {
      key: 'reduceSuccess',
      value: function reduceSuccess(state, action) {
        return _extends({}, state, {
          data: action.payload.response.data,
          error: null,
          fetching: false
        });
      }
    }, {
      key: 'reduceFail',
      value: function reduceFail(state, action) {
        return _extends({}, state, {
          error: action.error,
          fetching: false
        });
      }
    }, {
      key: 'request',
      value: function request(config) {
        if (!(this.defaults.axios && this.defaults.axios.request)) {
          throw new Error('Please configure the reducer \'' + this.defaults.name + '\' before first use.');
        }
        return this.defaults.axios.request(config);
      }
    }, {
      key: 'fetch',
      value: function fetch() {
        var _this3 = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return function (dispatch) {
          var cancel, promise;
          config = _this3.transformConfig(config);
          cancel = null;
          config = _extends({}, config, {
            cancelToken: new Axios.CancelToken(function (c) {
              return cancel = c;
            })
          });
          if (!config.ignore) {
            dispatch({
              type: _this3.TYPES.FETCHING,
              payload: {
                config: config
              }
            });
          }
          promise = _this3.request(config).then(function (response) {
            response.data = _this3.transformData(response.data);
            if (!config.ignore) {
              dispatch({
                type: _this3.TYPES.FETCH_SUCCESS,
                payload: {
                  config: config,
                  response: response
                }
              });
            }
            return response;
          }).catch(function (error) {
            if (typeof console !== "undefined" && console !== null) {
              console.error(error);
            }
            if (!config.ignore) {
              dispatch({
                type: _this3.TYPES.FETCH_FAIL,
                payload: {
                  config: config
                },
                error: Axios.isCancel(error) ? null : error
              });
            }
            throw error;
          });
          promise.cancel = cancel;
          return promise;
        };
      }
    }, {
      key: 'transformConfig',
      value: function transformConfig(config) {
        return _extends({}, config, {
          method: config.method || 'get',
          url: config.url || this.defaults.baseURL
        });
      }
    }, {
      key: 'transformData',
      value: function transformData(data) {
        return data;
      }
    }, {
      key: 'update',
      value: function update() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var id;
        id = config && config.id || config.data && config.data.id;
        if (id) {
          return this.put(config);
        } else {
          return this.post(config);
        }
      }
    }, {
      key: 'get',
      value: function get(id) {
        var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === "object") {
          config = id;
        }
        if (!((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === "object" || !id)) {
          config = {
            url: this.defaults.baseURL + '/' + id
          };
        }
        return this.fetch(config);
      }
    }, {
      key: 'post',
      value: function post() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!config.data) {
          config = {
            data: config
          };
        }
        config = _extends({}, config, {
          method: config.method || 'post'
        });
        return this.fetch(config);
      }
    }, {
      key: 'put',
      value: function put() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!config.data) {
          config = {
            data: config
          };
        }
        config = _extends({}, config, {
          method: config.method || 'put'
        });
        return this.fetch(config);
      }
    }, {
      key: 'patch',
      value: function patch() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        if (!config.data) {
          config = {
            data: config
          };
        }
        config = _extends({}, config, {
          method: config.method || 'patch'
        });
        return this.fetch(config);
      }
    }, {
      key: 'remove',
      value: function remove() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        config = _extends({}, config, {
          method: config.method || 'delete'
        });
        return this.fetch(config);
      }
    }]);

    return AxiosReducer;
  }();

  ;

  AxiosReducer.prototype.initial = {
    data: null,
    error: null,
    fetching: null
  };

  return AxiosReducer;
}.call(undefined);

AxiosRESTReducer = function (_AxiosReducer) {
  _inherits(AxiosRESTReducer, _AxiosReducer);

  function AxiosRESTReducer(defaults) {
    _classCallCheck(this, AxiosRESTReducer);

    // Iterate through loaded data
    var _this4 = _possibleConstructorReturn(this, (AxiosRESTReducer.__proto__ || Object.getPrototypeOf(AxiosRESTReducer)).call(this, defaults));

    _this4.iterate = _this4.iterate.bind(_this4);
    _this4.initial.byId = {};
    _this4.initial.data = [];
    return _this4;
  }

  _createClass(AxiosRESTReducer, [{
    key: 'reduceSuccess',
    value: function reduceSuccess(state, action) {
      var data, i, id, item, len, singleId;
      singleId = action.payload.config.id || action.payload.config.data && action.payload.config.data.id;
      if (action.payload.config.method === 'get' && !singleId) {
        state.data = [];
      }
      data = action.payload.response.data;
      if (!Array.isArray(data)) {
        data = [data];
      }
      for (i = 0, len = data.length; i < len; i++) {
        item = data[i];
        if (!(item && item.id)) {
          continue;
        }
        state.byId[item.id] = item;
        if (!singleId) {
          state.data.push(item.id);
        }
      }
      if (action.payload.config.method === 'delete' && singleId) {
        delete state.byId[singleId];
        state.data = function () {
          var j, len1, ref, results;
          ref = state.data;
          results = [];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            id = ref[j];
            if (id !== singleId) {
              results.push(id);
            }
          }
          return results;
        }();
      }
      return _extends({}, state, {
        fetching: false,
        error: null
      });
    }
  }, {
    key: 'transformConfig',
    value: function transformConfig(config) {
      var id;
      config = _get(AxiosRESTReducer.prototype.__proto__ || Object.getPrototypeOf(AxiosRESTReducer.prototype), 'transformConfig', this).call(this, config);
      id = config.id || config.data && config.data.id || config.params && config.params.id;
      if (id) {
        config.url += '/' + id;
      }
      return config;
    }
  }, {
    key: 'iterate',
    value: function iterate() {
      var id, state;
      boundMethodCheck(this, AxiosRESTReducer);
      state = this.getState();
      if (!state.data) {
        return [];
      }
      return function () {
        var i, len, ref, results;
        ref = state.data;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          id = ref[i];
          results.push(state.byId[id]);
        }
        return results;
      }();
    }
  }]);

  return AxiosRESTReducer;
}(AxiosReducer);

module.exports = { AxiosReducer: AxiosReducer, AxiosRESTReducer: AxiosRESTReducer };